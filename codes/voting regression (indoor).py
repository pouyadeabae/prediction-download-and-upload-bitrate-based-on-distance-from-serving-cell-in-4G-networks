from sklearn.ensemble import VotingRegressor
import pandas as pd
import matplotlib.pyplot as plt
from sklearn import neighbors
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import explained_variance_score
from sklearn.metrics import r2_score
from sklearn.metrics import mean_absolute_error
from sklearn import preprocessing
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
data = pd.read_csv (r'D:\project\indoor.csv')
dataplot=pd.read_csv(r'D:\project\indoorplot.csv')
xts = pd.DataFrame(dataplot,columns= ['ServingCell_Distance'])
dps = pd.DataFrame(data,columns= ['ServingCell_Distance','DL_bitrate','UL_bitrate'])
prescalx = pd.DataFrame(dps, columns= ['ServingCell_Distance'])
scaling=preprocessing.MinMaxScaler()
scaling.fit(prescalx)
x = scaling.transform(prescalx)
xtes=scaling.transform(xts)
y1 = pd.DataFrame(dps, columns= ['DL_bitrate'])
y2 = pd.DataFrame(dps, columns= ['UL_bitrate'])
#train test split DL y
X_train_DL, X_Val_test_DL, y_train_DL, y_Val_test_DL = train_test_split(x, y1, test_size=0.4, random_state=42)
X_test_DL, X_val_DL, y_test_DL, y_val_DL = train_test_split(X_Val_test_DL, y_Val_test_DL, test_size=0.5, random_state=42)
#train test split UL y
X_train_UL, X_Val_test_UL, y_train_UL, y_Val_test_UL = train_test_split(x, y2, test_size=0.4, random_state=42)
X_test_UL, X_val_UL, y_test_UL, y_val_UL = train_test_split(X_Val_test_UL, y_Val_test_UL, test_size=0.5, random_state=42)
#DL
reg = neighbors.KNeighborsRegressor(n_neighbors =12)
reg.fit(X_train_DL,y_train_DL)
y_predkN=reg.predict(X_test_DL)
y_predkNplot=reg.predict(xtes)
kscor=reg.score(X_test_DL,y_test_DL)
kmse=mean_squared_error(y_test_DL,y_predkN)
kr2score=r2_score(y_test_DL, y_predkN)
kmae=mean_absolute_error(y_test_DL, y_predkN)
kevs=explained_variance_score(y_test_DL, y_predkN)
print('KNN_mse_DL=',kmse)
print('KNN_score_DL=',kscor)
print('KNN_r2score_DL=',kr2score)
print('KNN_mae_Dl=',kmae)
print('KNN_evs_DL=',kevs)
#UL
reg2 = neighbors.KNeighborsRegressor(n_neighbors =35)
reg2.fit(X_train_UL,y_train_UL)
y_predkN2=reg2.predict(X_test_UL)
y_predkNULplot=reg2.predict(xtes)
kscor2=reg2.score(X_test_UL,y_test_UL)
kmse2=mean_squared_error(y_test_UL,y_predkN2)
kr2score2=r2_score(y_test_UL, y_predkN2)
kmae2=mean_absolute_error(y_test_UL, y_predkN2)
kevs2=explained_variance_score(y_test_UL, y_predkN2)
print('KNN_mse_UL=',kmse2)
print('KNN_score_UL=',kscor2)
print('KNN_r2score_UL=',kr2score2)
print('KNN_mae_UL=',kmae2)
print('KNN_evs_UL=',kevs2)
print('---------------------------------------------------------------------------')
#######################RF
#DL
regr = RandomForestRegressor(max_depth=28, random_state=42,n_estimators=300,max_samples=100)
regr.fit(X_train_DL,y_train_DL.values.ravel())
y_predRF=regr.predict(X_test_DL)
y_predRFplot=regr.predict(xtes)
rfscor=regr.score(X_test_DL,y_test_DL)
rfmse=mean_squared_error(y_test_DL,y_predRF)
rfr2score=r2_score(y_test_DL, y_predRF)
rfmae=mean_absolute_error(y_test_DL, y_predRF)
rfevs=explained_variance_score(y_test_DL, y_predRF)
print('RF_mse_DL=',rfmse)
print('RF_score_DL=',rfscor)
print('RF_r2score_DL=',rfr2score)
print('RF_mae_Dl=',rfmae)
print('RF_evs_DL=',rfevs)
#Ul
regr2 = RandomForestRegressor(max_depth=28, random_state=42,n_estimators=450,max_samples=200)
regr2.fit(X_train_UL,y_train_UL.values.ravel())
y_predRF2=regr2.predict(X_test_UL)
y_predRFULplot=regr2.predict(xtes)
rfscor2=regr2.score(X_test_UL,y_test_UL)
rfmse2=mean_squared_error(y_test_UL,y_predRF2)
rfr2score2=r2_score(y_test_UL, y_predRF2)
rfmae2=mean_absolute_error(y_test_UL, y_predRF2)
rfevs2=explained_variance_score(y_test_UL, y_predRF2)
print('RF_mse_UL=',rfmse2)
print('RF_score_UL=',rfscor2)
print('RF_r2score_UL=',rfr2score2)
print('RF_mae_UL=',rfmae2)
print('RF_evs_UL=',rfevs2)
print('-------------------------------------------------------------------------')
######################################################################VT
#DL
ereg = VotingRegressor(estimators=[('RF_DL', regr), ('KNN_DL',reg )])
ereg = ereg.fit(X_train_DL,y_train_DL.values.ravel())
y_predereg=ereg.predict(X_test_DL)
y_predvotplot=ereg.predict(xtes)
scorereg=ereg.score(X_test_DL,y_test_DL)
mseereg=mean_squared_error(y_test_DL,y_predereg)
r2scorereg=r2_score(y_test_DL, y_predereg)
maeereg=mean_absolute_error(y_test_DL, y_predereg)
evsereg=explained_variance_score(y_test_DL, y_predereg)
print('VR_mse_DL=',mseereg)
print('VT_score_DL=',scorereg)
print('VT_r2score_DL=',r2scorereg)
print('VT_mae_DL=',maeereg)
print('VT_evs_DL=',evsereg)
#UL
ereg2 = VotingRegressor(estimators=[('RF_UL', regr2), ('KNN_UL',reg2 )])
ereg2 = ereg2.fit(X_train_UL,y_train_UL.values.ravel())
y_predereg2=ereg2.predict(X_test_UL)
y_predvotULplot=ereg2.predict(xtes)
scorereg2=ereg2.score(X_test_UL,y_test_UL)
mseereg2=mean_squared_error(y_test_UL,y_predereg2)
r2scorereg2=r2_score(y_test_UL, y_predereg2)
maeereg2=mean_absolute_error(y_test_UL, y_predereg2)
evsereg2=explained_variance_score(y_test_UL, y_predereg2)
print('VR_mse_UL=',mseereg2)
print('VT_score_UL=',scorereg2)
print('VT_r2score_Ul=',r2scorereg2)
print('VT_mae_UL=',maeereg2)
print('VT_evs_UL=',evsereg2)
#################plotDL
plt.subplot(2,2,1)
plt.plot(xtes,y_predkNplot,'-r')
plt.title('Knn DL Pred')
plt.xlabel('Distance (m)')
plt.ylabel('Speed (Kb)')
plt.xticks([-0.23840371,-0.03846769,0.22811367,0.49469503,0.76127639,1.02785775],['50','200','400','600','800','1000'])
plt.subplot(2,2,2)
plt.plot(xtes,y_predRFplot)
plt.title('RF DL Pred')
plt.xlabel('Distance (m)')
plt.ylabel('Speed (Kb)')
plt.xticks([-0.23840371,-0.03846769,0.22811367,0.49469503,0.76127639,1.02785775],['50','200','400','600','800','1000'])
plt.subplot(2,2,3)
plt.plot(xtes,y_predRFplot,'g')
plt.title('RF DL Pred')
plt.xlabel('Distance (m)')
plt.ylabel('Speed (Kb)')
plt.xticks([-0.23840371,-0.03846769,0.22811367,0.49469503,0.76127639,1.02785775],['50','200','400','600','800','1000'])
plt.subplot(2,2,4)
plt.plot(xtes,y_predvotULplot)
plt.title('Vot UL Pred')
plt.xlabel('Distance (m)')
plt.ylabel('Speed (Kb)')
plt.xticks([-0.23840371,-0.03846769,0.22811367,0.49469503,0.76127639,1.02785775],['50','200','400','600','800','1000'])
plt.show()




